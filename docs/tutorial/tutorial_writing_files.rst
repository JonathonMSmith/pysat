.. _tutorial-write-files:

Writing Files
-------------

pysat includes support for creating netCDF4 files suitable for public scientific
distribution. Both the data and metadata attached to a
:py:class:`pysat.Instrument` object are used to create a file that both humans
and machines may understand and parse without any outside information.
This process is built with a variety of options to help meet the range of needs
of the scientific community.

For many users a netCDF4 file suitable for distribution to research collegues
may be created using default parameters as shown below.

.. code:: python

   import pysat

   # Instantiate Instrument object
   test = pysat.Instrument('pysat', 'testing')

   # Load data into Instrument
   test.load(2009, 1)

   # Create netCDF4 file
   fname = 'example/file/path/name/test.nc'
   test.to_netcdf(fname)

This process writes all of the data within `test.data`, including the metadata
stored at `inst.meta.data`, as well as adds a variety of supplemental attributes
to the file indicating the file's conventions, creation date, etc.

pysat's default conventions are a simplified implemention of the standards
developed as part of NASA's `Ionospheric Connections
(ICON) Explorer Mission. <https://www.nasa.gov/icon>`_. ICON's standards were
generated by creating the most
compatible combination of parameters from other existing standards and
software implementations within the community. The primary underlying
standards come from the Space Physics Data Facility (SPDF) International Solar
Terrestrial Physics ISTP/IACG Inter-Agency Consultative Group. This standard
is formally for NASA Common Data Format (CDF) files officially distributed
to the public via government systems. The standard has been modified, as noted
above, and accommodates and includes basic netCDF4 standards. While the overlap
between standards results in some duplicated information, pysat's default
user facing configuration minimizes this duplicated information.

===============     ==================================
File Attribute      Description
===============     ==================================
Conventions         File metadata convention name
Date_End            Timestamp of last data entry
Date_Start          Timestamp of first data entry
File                Original filepath and filename
File_Date           Timestamp of last data entry
Generation_Date     YearMonthDay of file creation
Logical_File_ID     Filename without any path or type
pysat_version       pysat version information
===============     ==================================

Example output of pysat formatting when loading file direct via netCDF4.
First, the file level attributes. There are some additional attributes, such
as references, acknowledgements, etc. that are attached to the pysat testing
Instrument object.

.. code:: python

    In [1]: import pysat

    In [2]: test = pysat.Instrument('pysat', 'testing')

    In [3]: test.load(2009, 1)

    In [4]: test.to_netcdf4('./test.nc')

    In [5]: netCDF4.Dataset('./test.nc')
    Out[5]:
    <class 'netCDF4._netCDF4.Dataset'>
    root group (NETCDF4 data model, file format HDF5):
        acknowledgements: Test instruments provided through the pysat project. https://www.github.com/pysat/pysat
        new_thing: 1
        references: Stoneback, Russell, et al. (2021). pysat/pysat v3.0 (Version v3.0). Zenodo. http://doi.org/10.5281/zenodo.1199703
        test_clean_kwarg:
        test_init_kwarg:
        test_preprocess_kwarg:
        pysat_version: 3.0.1
        Conventions: SPDF ISTP/IACG Modified for NetCDF
        Text_Supplement:
        Date_End: Thu, 01 Jan 2009,  2009-01-01T23:59:59.000 UTC
        Date_Start: Thu, 01 Jan 2009,  2009-01-01T00:00:00.000 UTC
        File: ['.', 'test.nc']
        File_Date: Thu, 01 Jan 2009,  2009-01-01T23:59:59.000 UTC
        Generation_Date: 20211022
        Logical_File_ID: test
        dimensions(sizes): Epoch(86400)
        variables(dimensions): int64 Epoch(Epoch), float64 uts(Epoch), float64 mlt(Epoch), float64 slt(Epoch), float64 longitude(Epoch), float64 latitude(Epoch), float64 altitude(Epoch), int64 orbit_num(Epoch), int64 dummy1(Epoch), int64 dummy2(Epoch), float64 dummy3(Epoch), float64 dummy4(Epoch), <class 'str'> string_dummy(Epoch), <class 'str'> unicode_dummy(Epoch), int8 int8_dummy(Epoch), int16 int16_dummy(Epoch), int32 int32_dummy(Epoch), int64 int64_dummy(Epoch)
        groups:

Here is an example of the information attached to a variable. Note that pysat
added the Format, Depend_0, Display_Type, and Var_Type metadata parameters,
part of the SPDF standard (should also include Fieldnam for completeness).

.. code:: python

   In [11]: data['longitude']
   Out[11]:
   <class 'netCDF4._netCDF4.Variable'>
   float64 longitude(Epoch)
       units: degrees
       long_name: Longitude
       notes:
       desc:
       value_min: 0.0
       value_max: 360.0
       fill: nan
       Format: f8
       Var_Type: data
       Depend_0: Epoch
       Display_Type: Time Series
   unlimited dimensions: Epoch
   current shape = (86400,)
   filling on, default _FillValue of 9.969209968386869e+36 used



Writing Mission Files
^^^^^^^^^^^^^^^^^^^^^


